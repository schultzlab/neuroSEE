% Written by Ann Go 

% This function maps place fields
%
% INPUTS:
%   spikes      : spike estimates obtained with oasisAR2
%   imtime      : imaging timestamps
%   trackData   : cell of tracking data with fields x, y, r, phi, w,
%                  speed, time, alpha, TTLout
%   params.
%     fr                    : imaging frame rate [default: 30.9 Hz]
%     PFmap.Nbins           : number of location bins
%     PFmap.Nepochs         : number of epochs for each 4 min video [default: 1]
%     PFmap.Vthr            : speed threshold (mm/s) [default: 20]
%     PFmap.histsmoothFac   : Gaussian smoothing window for histogram
%                               estimation [default: 10]

% OUTPUTS:
%   occMap                  : occupancy map
%   hist., asd.
%     spkMap                : spike map (Ncells rows x Nbins columns)
%     normspkMap
%     infoMap               : information map 
%     pfMap                 : place field map obtained with histogram estimation 
%     pfMap_sm              : (hist only) smoothed version of placeMap 
%     normpfMap             : place field map obtained with histogram estimation 
%     normpfMap_sm          : (hist only) smoothed version of placeMap 
%     spkMap_pertrial
%     normspkfMap_pertrial
%     pcIdx                 : row indices of original spikes corresponding
%                               to place cells
%   downData    : tracking data downsampled to imaging frequency, fields are
%                 x, y, r, phi, speed, t
%   activeData  : downsampled tracking data for when animal was moving, fields are
%                 x, y, r, phi, speed, t, spikes, spikes_pc 

function [ occMap, hist, asd, activeData ] = generatePFmap_1d_multisession( spikes, trackData, params )
    
Nbins = params.PFmap.Nbins;
Nepochs = params.PFmap.Nepochs;
Vthr = params.PFmap.Vthr;
histsmoothFac = params.PFmap.histsmoothFac;
Ncells = size(spikes,1);

%% Tracking data
downphi   = trackData.phi;
downx     = trackData.x;
downy     = trackData.y;
downspeed = trackData.speed;
downr     = trackData.r;
t         = trackData.time;

activex = cell(Ncells,1);       activey = cell(Ncells,1);
activephi = cell(Ncells,1);     activespk = cell(Ncells,1);
activet = cell(Ncells,1);       activespeed = cell(Ncells,1);
activer = cell(Ncells,1);       
bin_phi = cell(Ncells,1);       occMap = zeros(Ncells,Nbins);

for jj = 1:Ncells
    % Consider only samples when the mouse is active
    ind = find(downspeed{jj} > Vthr);
    activex{jj}     = downx{jj}(ind);
    activey{jj}     = downy{jj}(ind);
    activephi{jj}   = downphi{jj}(ind);
    activespk{jj}   = spikes{jj}(ind);
    activet{jj}     = t{jj}(ind);
    activespeed{jj} = downspeed{jj}(ind);
    activer{jj}     = downr{jj}(ind);
    
    % Bin phi data
    [bin_phi{jj},~] = discretize(activephi{jj},Nbins);
    occMap(jj,:) = histcounts(bin_phi{jj},Nbins);
end

%% Identify place cells by first calculating PF maps for entire session
% (i.e. Nepochs = 1)

% Initialise matrices
spkMap = zeros(Ncells, Nbins);         % spike map
pfMap = zeros(Ncells, Nbins);            % place field map
pfMap_asd = zeros(Ncells, Nbins);        % place field map for asd
infoMap = zeros(Ncells, 2);              % mutual info
infoMap_asd = zeros(Ncells, 2);          % mutual info for asd

% Calculate PF maps
for jj = 1:Ncells
    z = activespk{jj};

    % Spike rate maps
    for n = 1:Nbins
        spkMap(jj,n) = sum(z(bin_phi{jj} == n));
    end

    % histogram estimation
    pfMap(jj,:) = spkMap(jj,:)./occMap(jj,:);
    [infoMap(jj,1), infoMap(jj,2)] = infoMeasures(pfMap(jj,:),occMap(jj,:),0);

    % ASD estimation
    [pfMap_asd(jj,:),~] = runASD_1d(bin_phi{jj},z,Nbins);
    [infoMap_asd(jj,1), infoMap_asd(jj,2)] =...
        infoMeasures(pfMap_asd(jj,:)',ones(Nbins,1),0);
end

% Identify place cells
[hist.pcIdx,asd.pcIdx] = filter_nonPC(bin_phi, activespk, infoMap, infoMap_asd, Nbins);
activespk_hist = activespk(hist.pcIdx,:);
activespk_asd = activespk(asd.pcIdx,:);
Npcs = length(hist.pcIdx);
Npcs_asd = length(asd.pcIdx);

% Calculate PF maps per trial
dthr = 100;

for jj = 1:Ncells
    idx_temp = find( abs(diff(activephi{hist.pcIdx(jj)})) > dthr );
    for k = 1:numel(idx_temp)-1
        if idx_temp(k+1) == idx_temp(k)+1
            idx_temp(k) = 0;
        end
    end
    phi_bound{jj} = idx_temp( idx_temp > 0 );
end

for jj = 1:Ncells
    z = activespk_hist{jj};
    binPhi = bin_phi{hist.pcIdx(jj)};
    Ntrials = numel(phi_bound{jj})-1;
    for tr = 1:Ntrials
        phi = binPhi(phi_bound{jj}(tr)+1:phi_bound{jj}(tr+1));
        spike = z(phi_bound{jj}(tr)+1:phi_bound{jj}(tr+1));

        for n = 1:Nbins
            spkMap_pertrial{jj}(tr,n) = sum(spike(phi == n));
        end

        normspkMap_pertrial{jj}(tr,:) = hist.spkMap_pertrial{jj}(tr,:)./max(hist.spkMap_pertrial{jj}(tr,:));
        normspkMap_pertrial{jj}(isnan(hist.normspkMap_pertrial{jj})) = 0;
    end
    
end
for jj = 1:Npcs
    idx_temp = find( abs(diff(activephi{hist.pcIdx(jj)})) > dthr );
    for k = 1:numel(idx_temp)-1
        if idx_temp(k+1) == idx_temp(k)+1
            idx_temp(k) = 0;
        end
    end
    phi_bound{jj} = idx_temp( idx_temp > 0 );
end

for jj = 1:Npcs
    z = activespk_hist{jj};
    binPhi = bin_phi{hist.pcIdx(jj)};
    Ntrials = numel(phi_bound{jj})-1;
    for tr = 1:Ntrials
        phi = binPhi(phi_bound{jj}(tr)+1:phi_bound{jj}(tr+1));
        spike = z(phi_bound{jj}(tr)+1:phi_bound{jj}(tr+1));

        for n = 1:Nbins
            hist.spkMap_pertrial{jj}(tr,n) = sum(spike(phi == n));
        end

        hist.normspkMap_pertrial{jj}(tr,:) = hist.spkMap_pertrial{jj}(tr,:)./max(hist.spkMap_pertrial{jj}(tr,:));
        hist.normspkMap_pertrial{jj}(isnan(hist.normspkMap_pertrial{jj})) = 0;
    end
end

for jj = 1:Npcs_asd
    idx_temp = find( abs(diff(activephi{hist.pcIdx(jj)})) > dthr );
    for k = 1:numel(idx_temp)-1
        if idx_temp(k+1) == idx_temp(k)+1
            idx_temp(k) = 0;
        end
    end
    phi_bound_asd{jj} = idx_temp( idx_temp > 0 );
end

for jj = 1:Npcs_asd
    z = activespk_asd{jj};
    binPhi = bin_phi{asd.pcIdx(jj)};
    Ntrials = numel(phi_bound_asd{jj})-1;
    for tr = 1:Ntrials
        phi = binPhi(phi_bound_asd{jj}(tr)+1:phi_bound_asd{jj}(tr+1));
        spike = z(phi_bound_asd{jj}(tr)+1:phi_bound_asd{jj}(tr+1));

        for n = 1:Nbins
            asd.spkMap_pertrial{jj}(itr,n) = sum(spike(phi == n));
        end

        asd.normspkMap_pertrial{jj}(tr,:) = asd.spkMap_pertrial{jj}(tr,:)./max(asd.spkMap_pertrial{jj}(tr,:));
        asd.normspkMap_pertrial{jj}(isnan(asd.normspkMap_pertrial{jj})) = 0;
    end
end

%% Finalise place field maps, recalculate if Nepochs > 1
if Nepochs == 1
    hist.spkMap = spkMap(hist.pcIdx,:);
    hist.pfMap = pfMap(hist.pcIdx,:);
    for jj = 1:Npcs
        hist.normspkMap(jj,:) = hist.spkMap(jj,:)./max(hist.spkMap(jj,:));
        hist.pfMap_sm(jj,:) = smoothdata(hist.pfMap(jj,:),'gaussian',Nbins/histsmoothFac);
        hist.normpfMap(jj,:) = hist.pfMap(jj,:)./max(hist.pfMap(jj,:));
        hist.normpfMap_sm(jj,:) = hist.pfMap_sm(jj,:)./max(hist.pfMap_sm(jj,:));
    end
    hist.infoMap = infoMap(hist.pcIdx,:);
    
    asd.spkMap = spkMap(asd.pcIdx,:);
    asd.pfMap = pfMap_asd(asd.pcIdx,:);
    for jj = 1:Npcs_asd
        asd.normspkMap(jj,:) = asd.spkMap(jj,:)./max(asd.spkMap(jj,:));
        asd.normpfMap(jj,:) = asd.pfMap(jj,:)./max(asd.pfMap(jj,:));
    end
    asd.infoMap = infoMap_asd(asd.pcIdx,:);

else
    % Calculate PF maps for each epoch
    % Initialise matrices
    occMap = zeros(Npcs, Nbins, Nepochs);                         
    hist.spkMap = zeros(Npcs, Nbins, Nepochs);            
    hist.normspkMap = zeros(Npcs, Nbins, Nepochs);            
    hist.pfMap = zeros(Npcs, Nbins, Nepochs);               
    hist.pfMap_sm = zeros(Npcs, Nbins, Nepochs);            
    hist.normpfMap = zeros(Npcs, Nbins, Nepochs);        
    hist.normpfMap_sm = zeros(Npcs, Nbins, Nepochs);     
    hist.infoMap = zeros(Npcs, 2, Nepochs);              
    asd.spkMap = zeros(Npcs_asd, Nbins, Nepochs);            
    asd.normspkMap = zeros(Npcs_asd, Nbins, Nepochs);            
    asd.pfMap = zeros(Npcs_asd, Nbins, Nepochs);              
    asd.normpfMap = zeros(Npcs_asd, Nbins, Nepochs);          
    asd.infoMap = zeros(Npcs_asd, 2, Nepochs);               

    % Calculate PF maps
    e_bound = round( linspace(1,size(activespk{1},1),Nepochs+1) );
    for jj = 1:Npcs
        z = activespk_hist{jj};

        % separate exploration in smaller intervals
        for e = 1:Nepochs
            bin_phi_e = bin_phi{jj}(e_bound(e):e_bound(e+1));
            spike_e = z(e_bound(e):e_bound(e+1));

            % Occupancy and spike rate maps
            occMap(jj,:,e) = histcounts(bin_phi_e,Nbins);
            for n = 1:Nbins
                hist.spkMap(jj,n,e) = sum(spike_e(bin_phi_e == n));
            end
            hist.normspkMap(jj,:,e) = hist.spkMap(jj,:,e)./max(hist.spkMap(jj,:,e));
            
            % histogram estimation
            hist.pfMap(jj,:,e) = hist.spkMap(jj,:,e)./occMap(e,:);
            hist.pfMap(isnan(hist.pfMap)) = 0;
            hist.pfMap_sm(jj,:,e) = smoothdata(hist.pfMap(jj,:,e),'gaussian',Nbins/histsmoothFac);

            hist.normpfMap(jj,:,e) = hist.pfMap(jj,:,e)./max(hist.pfMap(jj,:,e));
            hist.normpfMap_sm(jj,:,e) = hist.pfMap_sm(jj,:,e)./max(hist.pfMap_sm(jj,:,e));
            [hist.infoMap(jj,1,e), hist.infoMap(jj,2,e)] = infoMeasures(hist.pfMap(jj,:,e),occMap(e,:),0);
        end
    end
    for jj = 1:Npcs_asd
        z = activespk_asd{jj};

        % separate exploration in smaller intervals
        for e = 1:Nepochs
            bin_phi_e = bin_phi{jj}(e_bound(e):e_bound(e+1));
            spike_e = z(e_bound(e):e_bound(e+1));

            % Occupancy and spike rate maps
            for n = 1:Nbins
                asd.spkMap(jj,n,e) = sum(spike_e(bin_phi_e == n));
            end
            asd.normspkMap(jj,:,e) = asd.spkMap(jj,:,e)./max(asd.spkMap(jj,:,e));

            % asd estimation
            [asd.pfMap(jj,:,e),~] = runASD_1d(bin_phi_e,(spike_e)',Nbins);
            asd.normpfMap(jj,:,e) = asd.pfMap(jj,:,e)./max(asd.pfMap(jj,:,e));
            [asd.infomap(jj,1,e), asd.infomap(jj,2,e)] = ...
                infoMeasures(squeeze(asd.pfMap(jj,:,e))',ones(Nbins,1),0);
        end
    end
end


% Outputs
activeData.x = activex;
activeData.y = activey;
activeData.r = activer;
activeData.phi = activephi;
activeData.speed = activespeed;
activeData.t = activet;
activeData.spikes_hist = activespk_hist;
activeData.spikes_asd = activespk_asd; 
activeData.spkMap_pertrial = spkMap_pertrial;
activeData.normspkMap_pertrial = normspkMap_pertrial;

end


